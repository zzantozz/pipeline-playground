/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Strings;
import com.sun.net.httpserver.HttpServer;
import org.apache.commons.io.IOUtils;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.example.core.DataPoint;
import org.example.core.Settings;

import java.io.*;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class Ingestor {

    public static final String INGEST_TOPIC = "ingested-things";
    private static HttpServer server;
    private static Producer<String, String> producer;

    public static void main(String[] args) throws Exception {
        Properties props = new Properties();
        props.put("bootstrap.servers", Settings.KAFKA_HOST + ":9092");
        props.put("acks", "all");
        props.put("retries", 0);
        props.put("batch.size", 16384);
        props.put("linger.ms", 1);
        props.put("buffer.memory", 33554432);
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        producer = new KafkaProducer<>(props);
        startServer();
    }

    private static void startServer() throws Exception {
        server = HttpServer.create(new InetSocketAddress(8000), 0);
        final ObjectMapper objectMapper = new ObjectMapper();
        server.createContext("/ingest", t -> {
            final String value = IOUtils.toString(t.getRequestBody(), StandardCharsets.UTF_8);
            int code;
            String message;
            if (value.isEmpty()) {
                code = 400;
                message = "No value provided. Nothing sent.";
            } else {
                try {
                    DataPoint dataPoint = objectMapper.readValue(value, DataPoint.class);
                    if ("auto".equals(dataPoint.getTimestamp())) {
                        dataPoint.setTimestamp(System.currentTimeMillis());
                    }
                    if (Strings.isNullOrEmpty(dataPoint.getName())) {
                        code = 400;
                        message = "Data point must have a name";
                    } else if (dataPoint.getTimestamp() < 1) {
                        code = 400;
                        message = "Data point must have a positive timestamp";
                    } else {
                        final Future<RecordMetadata> sendFuture = producer.send(new ProducerRecord<>(INGEST_TOPIC, value));
                        final RecordMetadata recordMetadata;
                        try {
                            recordMetadata = sendFuture.get(5000, TimeUnit.SECONDS);
                            code = 200;
                            message = String.format("Value was sent to %s at %d\n", INGEST_TOPIC, recordMetadata.timestamp());
                        } catch (InterruptedException | TimeoutException | ExecutionException e) {
                            code = 500;
                            message = "Failed to produce to topic within timeout";
                        }
                    }
                } catch (JsonProcessingException e) {
                    code = 400;
                    message = "Invalid input JSON";
                }
            }
            t.sendResponseHeaders(code, message.length());
            OutputStream os = t.getResponseBody();
            os.write(message.getBytes());
            os.close();
        });
        new Thread(() -> server.start(), "HTTP Server").start();
    }
}
